x-default-policy: &default_policy
  restart: unless-stopped
  networks:
    - xql-perfect-guide

services:
  app:
    <<: *default_policy
    # LogQLでcontainerタグにする
    container_name: xql-sample-app-v1
    build:
      context: ./app
      dockerfile: Dockerfile
    environment:
      LOG_LEVEL: info
      APP_VERSION: v1.0.0
      SERVICE_NAME: XQL-PERFECT-GUIDE-APP
      TRACE_BACKEND_ADDRESS: otel-collector:4317
    ports:
      - "8080:8080"
    depends_on:
      - tempo
      - otel-collector
    develop:
      watch:
        - action: rebuild
          path: app/

  chef-service:
    <<: *default_policy
    container_name: chef-service
    build:
      context: ./chef-service
      dockerfile: Dockerfile    
    environment:
      CHEF_SERIVCE_HOST: "0.0.0.0"
      CHEF_SERIVCE_PORT: 8090
      CHEF_SERVICE_DB_USER: "root" 
      CHEF_SERVICE_DB_PASSWORD: "password"
      CHEF_SERVICE_DB_HOST: "mysql-chef-service"
      CHEF_SERVICE_DB_NAME: "chef"
      CHEF_SERVICE_DB_PORT: "3306"
      OTEL_SERVICE_NAME: CHEF-SERVICE
      OTEL_TRACES_EXPORTER: otlp
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_EXPORTER_OTLP_ENDPOINT: otel-collector:4317
      OTEL_EXPORTER_OTLP_INSECURE: True
    ports:
      - "8090:8090"
    depends_on:
      - tempo
      - otel-collector
      - mysql-chef-service
    develop:
      watch:
        - action: rebuild
          path: chef-service/       
  mysql-chef-service:
    <<: *default_policy  
    container_name: mysql-chef-service
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: chef
      MYSQL_USER: chefs
      MYSQL_PASSWORD: password  
    ports:
      - "3306:3306"
    volumes:
      - ./chef-service/assets/init.sql:/docker-entrypoint-initdb.d/init.sql

  grafana:
    <<: *default_policy
    container_name: grafana
    image: grafana/grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    ports:
      - 3000:3000
    depends_on:
      - prometheus
      - loki
      - promtail
      - tempo
  prometheus:
    <<: *default_policy
    container_name: prometheus
    image: prom/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--enable-feature=exemplar-storage"
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
    ports:
      - 9090:9090
  loki:
    <<: *default_policy
    container_name: loki
    image: grafana/loki
    command: "-config.file=/etc/loki/loki.yaml"
    volumes:
      - ./loki/loki.yaml:/etc/loki/loki.yaml
    ports:
      - 3100:3100
      - 7946
      - 9095
  promtail:
    <<: *default_policy
    container_name: promtail
    image: grafana/promtail
    command: "-config.file=/etc/promtail/promtail.yaml"
    volumes:
      - ./promtail:/etc/promtail/
      - /var/run/docker.sock:/var/run/docker.sock
  tempo:
    <<: *default_policy
    container_name: tempo
    image: grafana/tempo
    command: "-config.file=/etc/tempo.yaml"
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo.yaml
    ports:
      - "4317"  # otlp grpc
      - "4318"  # otlp http
  minio:
    <<: *default_policy
    container_name: minio
    image: minio/minio
    restart: unless-stopped
    entrypoint: sh
    # command: -c 'mkdir -p /export/loki && /usr/bin/minio server /export'
    command: -c '/usr/bin/minio server /export'
    environment:
      - MINIO_ACCESS_KEY=loki
      - MINIO_SECRET_KEY=supersecret
    volumes:
      - ./data/minio:/export
    ports:
      - 9000:9000
  otel-collector:
    <<: *default_policy  
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib
    restart: always
    command: ["--config=/etc/otel-collector-config.yaml", "${OTELCOL_ARGS}"]
    volumes:
      - ./otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "55679:55679" # zpages extension      
    depends_on:
      - tempo      

networks:
  xql-perfect-guide:
volumes:
  prom_data:
